// Test script cho Activities Management API
// Ch·∫°y v·ªõi: node test-activities.js

const axios = require('axios');

const BASE_URL = 'http://localhost:4000';

// Test data
const testActivity = {
  name: 'H·ªôi th·∫£o CNTT 2024',
  description: 'H·ªôi th·∫£o v·ªÅ c√¥ng ngh·ªá th√¥ng tin v√† xu h∆∞·ªõng m·ªõi',
  location: 'Ph√≤ng A101',
  start_time: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 ng√†y sau
  end_time: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000 + 8 * 60 * 60 * 1000).toISOString(), // 8 gi·ªù sau
  max_participants: 50
};

let authToken = '';
let createdActivityId = null;

async function testAPI() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test Activities API...\n');

  try {
    // B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token
    console.log('1. ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token...');
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'admin@example.com',
      password: 'admin123'
    }).catch(async () => {
      // N·∫øu admin ch∆∞a t·ªìn t·∫°i, t·∫°o admin m·ªõi
      console.log('   T·∫°o admin m·ªõi...');
      const registerResponse = await axios.post(`${BASE_URL}/auth/register`, {
        email: 'admin@example.com',
        password: 'admin123',
        name: 'Admin User',
        role: 'admin'
      });
      return registerResponse;
    });

    authToken = loginResponse.data.accessToken;
    console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng');
    console.log('   Token:', authToken ? 'ƒê√£ nh·∫≠n' : 'Kh√¥ng c√≥');
    console.log('');

    // B∆∞·ªõc 2: T·∫°o ho·∫°t ƒë·ªông m·ªõi
    console.log('2. T·∫°o ho·∫°t ƒë·ªông m·ªõi...');
    const createResponse = await axios.post(`${BASE_URL}/activities`, testActivity, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    createdActivityId = createResponse.data.activity.id;
    console.log('‚úÖ T·∫°o ho·∫°t ƒë·ªông th√†nh c√¥ng');
    console.log('   ID:', createdActivityId);
    console.log('   T√™n:', createResponse.data.activity.name);
    console.log('');

    // B∆∞·ªõc 3: L·∫•y danh s√°ch ho·∫°t ƒë·ªông
    console.log('3. L·∫•y danh s√°ch ho·∫°t ƒë·ªông...');
    const listResponse = await axios.get(`${BASE_URL}/activities`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ L·∫•y danh s√°ch th√†nh c√¥ng');
    console.log('   T·ªïng s·ªë:', listResponse.data.pagination.total);
    console.log('   Trang hi·ªán t·∫°i:', listResponse.data.pagination.page);
    console.log('');

    // B∆∞·ªõc 4: L·∫•y ho·∫°t ƒë·ªông theo ID
    console.log('4. L·∫•y ho·∫°t ƒë·ªông theo ID...');
    const getByIdResponse = await axios.get(`${BASE_URL}/activities/${createdActivityId}`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ L·∫•y ho·∫°t ƒë·ªông theo ID th√†nh c√¥ng');
    console.log('   T√™n:', getByIdResponse.data.activity.name);
    console.log('   Tr·∫°ng th√°i:', getByIdResponse.data.activity.status);
    console.log('');

    // B∆∞·ªõc 5: C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông
    console.log('5. C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông...');
    const updateResponse = await axios.put(`${BASE_URL}/activities/${createdActivityId}`, {
      name: 'H·ªôi th·∫£o CNTT 2024 - C·∫≠p nh·∫≠t',
      description: 'H·ªôi th·∫£o v·ªÅ c√¥ng ngh·ªá th√¥ng tin v√† xu h∆∞·ªõng m·ªõi - Phi√™n b·∫£n c·∫≠p nh·∫≠t',
      max_participants: 60
    }, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông th√†nh c√¥ng');
    console.log('   T√™n m·ªõi:', updateResponse.data.activity.name);
    console.log('   S·ªë l∆∞·ª£ng t·ªëi ƒëa:', updateResponse.data.activity.max_participants);
    console.log('');

    // B∆∞·ªõc 6: C·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫°t ƒë·ªông
    console.log('6. C·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫°t ƒë·ªông...');
    const updateStatusResponse = await axios.patch(`${BASE_URL}/activities/${createdActivityId}/status`, {
      status: 3
    }, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng');
    console.log('   Tr·∫°ng th√°i m·ªõi:', updateStatusResponse.data.activity.status_name);
    console.log('');

    // B∆∞·ªõc 7: L·∫•y ho·∫°t ƒë·ªông c·ªßa t√¥i
    console.log('7. L·∫•y ho·∫°t ƒë·ªông c·ªßa t√¥i...');
    const myActivitiesResponse = await axios.get(`${BASE_URL}/activities/my`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ L·∫•y ho·∫°t ƒë·ªông c·ªßa t√¥i th√†nh c√¥ng');
    console.log('   S·ªë l∆∞·ª£ng:', myActivitiesResponse.data.pagination.total);
    console.log('');

    // B∆∞·ªõc 8: Test t√¨m ki·∫øm v√† l·ªçc
    console.log('8. Test t√¨m ki·∫øm v√† l·ªçc...');
    const searchResponse = await axios.get(`${BASE_URL}/activities?q=CNTT&status=3&limit=5`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ T√¨m ki·∫øm th√†nh c√¥ng');
    console.log('   K·∫øt qu·∫£ t√¨m ki·∫øm:', searchResponse.data.activities.length);
    console.log('');

    // B∆∞·ªõc 9: Test validation errors
    console.log('9. Test validation errors...');
    try {
      await axios.post(`${BASE_URL}/activities`, {
        name: 'AB', // T√™n qu√° ng·∫Øn
        start_time: 'invalid-date',
        end_time: '2024-01-01T00:00:00.000Z'
      }, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('‚úÖ Validation errors ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng');
        console.log('   L·ªói:', error.response.data.message);
      } else {
        console.log('‚ùå L·ªói kh√¥ng mong mu·ªën:', error.message);
      }
    }
    console.log('');

    // B∆∞·ªõc 10: Test unauthorized access
    console.log('10. Test unauthorized access...');
    try {
      await axios.get(`${BASE_URL}/activities`);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Unauthorized access ƒë∆∞·ª£c ch·∫∑n ƒë√∫ng');
      } else {
        console.log('‚ùå L·ªói kh√¥ng mong mu·ªën:', error.message);
      }
    }
    console.log('');

    // B∆∞·ªõc 11: X√≥a ho·∫°t ƒë·ªông (cleanup)
    console.log('11. X√≥a ho·∫°t ƒë·ªông (cleanup)...');
    const deleteResponse = await axios.delete(`${BASE_URL}/activities/${createdActivityId}`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ X√≥a ho·∫°t ƒë·ªông th√†nh c√¥ng');
    console.log('   Th√¥ng b√°o:', deleteResponse.data.message);
    console.log('');

    console.log('üéâ T·∫•t c·∫£ test Activities API ƒë√£ ho√†n th√†nh th√†nh c√¥ng!');
    console.log('\nüìã T√≥m t·∫Øt:');
    console.log('   - T·∫°o ho·∫°t ƒë·ªông: ‚úÖ');
    console.log('   - L·∫•y danh s√°ch: ‚úÖ');
    console.log('   - L·∫•y theo ID: ‚úÖ');
    console.log('   - C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông: ‚úÖ');
    console.log('   - C·∫≠p nh·∫≠t tr·∫°ng th√°i: ‚úÖ');
    console.log('   - L·∫•y ho·∫°t ƒë·ªông c·ªßa t√¥i: ‚úÖ');
    console.log('   - T√¨m ki·∫øm v√† l·ªçc: ‚úÖ');
    console.log('   - Validation: ‚úÖ');
    console.log('   - Authorization: ‚úÖ');
    console.log('   - X√≥a ho·∫°t ƒë·ªông: ‚úÖ');

  } catch (error) {
    console.error('‚ùå Test th·∫•t b·∫°i:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Response:', error.response.data);
    }
    
    // Cleanup n·∫øu c√≥ l·ªói
    if (createdActivityId && authToken) {
      try {
        await axios.delete(`${BASE_URL}/activities/${createdActivityId}`, {
          headers: { Authorization: `Bearer ${authToken}` }
        });
        console.log('üßπ ƒê√£ cleanup ho·∫°t ƒë·ªông test');
      } catch (cleanupError) {
        console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ cleanup ho·∫°t ƒë·ªông test');
      }
    }
  }
}

// Ki·ªÉm tra server c√≥ ch·∫°y kh√¥ng
async function checkServer() {
  try {
    await axios.get(`${BASE_URL}/`);
    console.log('‚úÖ Server ƒëang ch·∫°y t·∫°i', BASE_URL);
    return true;
  } catch (error) {
    console.log('‚ùå Server kh√¥ng ch·∫°y. Vui l√≤ng kh·ªüi ƒë·ªông server tr∆∞·ªõc:');
    console.log('   cd ql_diemdanh_be && npm start');
    return false;
  }
}

// Th·ª±c thi ch√≠nh
async function main() {
  console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i server...');
  const serverRunning = await checkServer();
  
  if (serverRunning) {
    await testAPI();
  } else {
    process.exit(1);
  }
}

main();
